/// last updated: 2025-10-18

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Basic helpers
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && (
        request.auth.uid == userId
        || (request.auth.token.phone_number != null && request.auth.token.phone_number == userId)
      );
    }

    // Admin detection: prefer custom claim, fall back to users/{uid}.role == 'admin'
    function isAdmin() {
      return isSignedIn() && (
        (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
        || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
    }

    function isWorker() {
      return isSignedIn() && (
        (request.auth.token != null && request.auth.token.role == 'worker')
        || exists(/databases/$(database)/documents/workers/$(request.auth.uid))
      );
    }

    // Do not allow clients to set server-managed fields except when equal to request.time
    function allowedServerTimestamp(fieldName) {
      return !(fieldName in request.resource.data) || request.resource.data[fieldName] == request.time;
    }

    function noServerFields() {
      return !( 'orderNumber' in request.resource.data )
             && !( 'assignmentHistory' in request.resource.data )
             && !( 'paymentRef' in request.resource.data )
             && allowedServerTimestamp('createdAt')
             && allowedServerTimestamp('updatedAt');
    }

    // -----------------------
    // users collection
    // -----------------------
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && noServerFields();

      // Allow reads for the owner, or when the requester has an admin claim,
      // or when the requester's users/{uid} doc contains role == 'admin'.
      allow read: if isSignedIn() && (
        isOwner(userId)
        || (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
        || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );

      allow update: if isSignedIn() && (
        // Allow updates by admin (via token or user doc role) or the owner with restrictions
        (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
        || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
        || (
          isOwner(userId)
          && ( !('role' in request.resource.data) || request.resource.data.role == resource.data.role )
          && noServerFields()
        )
      );

      allow delete: if isSignedIn() && (
        isOwner(userId)
        || (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
        || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );

      // users/{uid}/orders subcollection
      match /orders/{orderId} {
        allow create: if isSignedIn()
          && isOwner(userId)
          && noServerFields()
          && ('items' in request.resource.data)
          && ('totalAmount' in request.resource.data);

        allow get: if isSignedIn() && (
          isOwner(userId)
          || (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
          || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
          || (isWorker() && (resource.data.workerId == request.auth.uid || resource.data.status == 'pending'))
        );

        allow list: if isSignedIn() && (
          // Allow listing only for admins or the owner of this user's orders.
          // Clients should query the per-user subcollection `users/{uid}/orders` when
          // listing a user's orders. Avoid inspecting request.query here because
          // the rules engine in this environment does not support request.query.where().
          (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
          || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
          || isOwner(userId)
        );

        allow update: if isSignedIn() && (
          // Admins can update any order
          (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
          || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
          || (
            isOwner(userId)
            && !( 'workerId' in request.resource.data )
            && !( 'status' in request.resource.data )
            && noServerFields()
          )
          || (
            isWorker()
            && resource.data.workerId == request.auth.uid
            && noServerFields()
            // allow only limited status transitions by the worker
            && (
              ( 'status' in request.resource.data && (
                 (resource.data.status == 'assigned' && request.resource.data.status == 'accepted')
                 || (resource.data.status == 'accepted' && request.resource.data.status == 'in_progress')
                 || (resource.data.status == 'in_progress' && request.resource.data.status == 'completed')
               ) && request.resource.data.workerId == resource.data.workerId)
              || ( !('status' in request.resource.data) && !('workerId' in request.resource.data) )
            )
          )
        );

        allow delete: if isSignedIn() && (
          (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
          || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
        );
      }

      // users/{uid}/payments subcollection
      match /payments/{paymentId} {
        allow create: if isSignedIn() && isOwner(userId) && noServerFields();
        allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
        allow update: if isSignedIn() && (isAdmin() || (isOwner(userId) && noServerFields()));
        allow delete: if isSignedIn() && isAdmin();
      }

      // users/{uid}/cart subcollection
      match /cart/{cartId} {
        allow read, write: if isSignedIn() && (isOwner(userId) || isAdmin());
      }
    }

    // -----------------------
    // workers collection
    // -----------------------
    match /workers/{workerId} {
      allow create: if isSignedIn() && (isAdmin() || isOwner(workerId)) && noServerFields();
      allow read: if isSignedIn() && (isAdmin() || isWorker() || isOwner(workerId));
      allow update: if isSignedIn() && (isAdmin() || isOwner(workerId)) && noServerFields();
      allow delete: if isSignedIn() && isAdmin();
    }

    // -----------------------
    // services collection
    // -----------------------
    match /services/{serviceId} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    // -----------------------
    // top-level orders collection
    // -----------------------
    match /orders/{orderId} {
      allow get: if isSignedIn() && (
        (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
        || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
        || (resource.data.orderOwner == request.auth.uid)
        || (resource.data.userId == request.auth.uid)
        || (isWorker() && (resource.data.workerId == request.auth.uid || resource.data.status == 'pending'))
      );

      allow list: if isSignedIn() && (
        // Top-level orders listing is restricted to admins only. Regular users
        // must list their orders from `users/{uid}/orders` to avoid exposing
        // other users' orders. This also avoids using unsupported request.query.where().
        (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
        || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );

      allow create: if isSignedIn() && noServerFields() && ('items' in request.resource.data) && ('totalAmount' in request.resource.data);

      allow update: if isSignedIn() && (
        (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
        || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
        || ((resource.data.orderOwner == request.auth.uid || resource.data.orderOwner == request.auth.token.phone_number)
            && !( 'workerId' in request.resource.data )
            && !( 'status' in request.resource.data )
            && noServerFields())
        || (isWorker() && resource.data.workerId == request.auth.uid && noServerFields()
            && (
              ( 'status' in request.resource.data && (
                (resource.data.status == 'assigned' && request.resource.data.status == 'accepted')
                || (resource.data.status == 'accepted' && request.resource.data.status == 'in_progress')
                || (resource.data.status == 'in_progress' && request.resource.data.status == 'completed')
              ) && request.resource.data.workerId == resource.data.workerId)
              || ( !('status' in request.resource.data) && !('workerId' in request.resource.data) )
            ))
      );

      allow delete: if isSignedIn() && (
        (request.auth.token != null && (request.auth.token.admin == true || request.auth.token.role == 'admin'))
        || (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
    }

    // -----------------------
    // bookings, payments, offers, admins, audit_logs, etc.
    // replicate admin/owner semantics similar to above.
    // -----------------------
    match /bookings/{bookingId} {
      allow create: if isSignedIn() && noServerFields() && (
        request.resource.data.orderOwner == request.auth.uid
        || request.resource.data.userId == request.auth.uid
        || (request.auth.token.phone_number != null && (request.resource.data.orderOwner == request.auth.token.phone_number || request.resource.data.userId == request.auth.token.phone_number))
      );

      allow get: if isSignedIn() && (isAdmin() || request.resource.data.orderOwner == request.auth.uid || request.resource.data.userId == request.auth.uid);
      // Restrict listing bookings at top-level to admins; users should list their
      // bookings via a per-user subcollection if available.
      allow list: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && (isAdmin() || ((request.resource.data.orderOwner == request.auth.uid || request.resource.data.userId == request.auth.uid) && noServerFields()));
      allow delete: if isSignedIn() && isAdmin();
    }

    match /offers/{offerId} {
      allow read: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    match /payments/{paymentId} {
      allow read: if isSignedIn() && (isAdmin() || (resource.data.orderOwner == request.auth.uid) || (resource.data.userId == request.auth.uid) || (request.auth.token.phone_number != null && (resource.data.userId == request.auth.token.phone_number || resource.data.orderOwner == request.auth.token.phone_number)));
      allow create: if isSignedIn() && noServerFields() && ('amount' in request.resource.data || 'totalAmount' in request.resource.data);
      allow update: if isSignedIn() && (isAdmin() || ((resource.data.userId == request.auth.uid || resource.data.orderOwner == request.auth.uid) && noServerFields()));
      allow delete: if isSignedIn() && isAdmin();
    }

    match /admins/{adminId} {
      allow read: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && (isAdmin() || (request.auth.uid == adminId && exists(/databases/$(database)/documents/users/$(adminId)) && get(/databases/$(database)/documents/users/$(adminId)).data.role == 'admin'));
      allow update, delete: if isSignedIn() && isAdmin();
    }

    match /audit_logs/{logId} {
      allow read, create, update, delete: if isSignedIn() && isAdmin();
    }

    // Deny by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
